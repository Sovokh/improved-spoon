#include <stdio.h>
#include <string.h>
#include <windows.h>

// Define the maximum number of reminders
#define MAX_REMINDERS 10

// Structure to hold reminders
struct Reminder {
    char text[100];
    int hour;
    int minute;
};

// Function to get reminders from the user
void getReminders(struct Reminder *reminders, int *numReminders) {
    printf("Enter your reminders for tomorrow night:\n");
    
    for (int i = 0; i < MAX_REMINDERS; i++) {
        printf("Reminder %d (HH:MM text): ", i + 1);
        scanf("%d:%d %[^\n]", &reminders[i].hour, &reminders[i].minute, reminders[i].text);
        getchar(); // Consume the newline character
        
        (*numReminders)++;
        
        char another;
        printf("Add another reminder? (y/n): ");
        scanf(" %c", &another);
        if (another != 'y' && another != 'Y') {
            break;
        }
    }
}

// Function to create a BAT file with reminders
void createBatchFile(struct Reminder *reminders, int numReminders) {
    FILE *batchFile = fopen("reminders.bat", "w");
    if (batchFile == NULL) {
        printf("Error: Unable to create the batch file.\n");
        return;
    }

    fprintf(batchFile, "@echo off\n");
    for (int i = 0; i < numReminders; i++) {
        fprintf(batchFile, "echo Reminder %d: %02d:%02d - %s\n", i + 1, reminders[i].hour, reminders[i].minute, reminders[i].text);
    }
    fprintf(batchFile, "pause\n");
    fclose(batchFile);
}

int main() {
    struct Reminder reminders[MAX_REMINDERS];
    int numReminders = 0;

    getReminders(reminders, &numReminders);
    createBatchFile(reminders, numReminders);

    printf("Reminders saved to 'reminders.bat'.\n");

    return 0;
}
